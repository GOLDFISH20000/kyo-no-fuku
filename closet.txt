<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <title>写真アップロード＆分類フォーム</title>
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@latest/dist/tf.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@teachablemachine/image@latest/dist/teachablemachine-image.min.js"></script>
</head>
<body>
    <h2>画像をアップロードする</h2>
    <label for="camera-upload">画像を選択してアップロード:</label>
    <input id="camera-upload" type="file" name="image" accept="image/*" capture="camera">
    <button onclick="uploadAndPredict()">送信</button>

    <div id="label-container"></div>

    <script type="text/javascript">
        const URL = "./my_model/";
        let model, maxPredictions;

        async function init() {
            const modelURL = URL + "model.json";
            const metadataURL = URL + "metadata.json";

            try {
                model = await tmImage.load(modelURL, metadataURL);
                maxPredictions = model.getTotalClasses();
                console.log("Model loaded successfully");
            } catch (error) {
                console.error("モデルの読み込みに失敗しました:", error);
            }
        }

        async function predict(imageElement) {
            if (!model) {
                console.error("モデルが読み込まれていません");
                return;
            }

            try {
                const prediction = await model.predict(imageElement);
                console.log("Prediction:", prediction);

                // 結果を表示する
                const labelContainer = document.getElementById("label-container");
                labelContainer.innerHTML = '';

                for (let i = 0; i < maxPredictions; i++) {
                    const classPrediction =
                        prediction[i].className + ": " + prediction[i].probability.toFixed(2);
                    const div = document.createElement("div");
                    div.textContent = classPrediction;
                    labelContainer.appendChild(div);
                }

                // 分類結果に応じて処理を行う
                if (prediction[0].probability >= 0.8) {
                    // class1が0.8以上の場合、フォームを送信する
                    document.getElementById("file-upload-form").submit();
                } else if (prediction[1].probability >= 0.8) {
                    // class2が0.8以上の場合、警告を出す
                    alert("この画像は服として認識されませんでした。");
                }

            } catch (error) {
                console.error("予測の実行に失敗しました:", error);
            }
        }

        function uploadAndPredict() {
            const fileInput = document.getElementById("camera-upload");
            const file = fileInput.files[0];
            if (!file) {
                alert("画像を選択してください。");
                return;
            }

            const reader = new FileReader();
            reader.onload = function(event) {
                const img = new Image();
                img.onload = function() {
                    predict(img);
                };
                img.src = event.target.result;
            };
            reader.readAsDataURL(file);
        }

        function uploadAndPredictFromUpload() {
            const fileInput = document.getElementById("file-upload");
            const file = fileInput.files[0];
            if (!file) {
                alert("画像を選択してください。");
                return;
            }

            const reader = new FileReader();
            reader.onload = function(event) {
                const img = new Image();
                img.onload = function() {
                    predict(img);
                };
                img.src = event.target.result;
            };
            reader.readAsDataURL(file);
        }

        // 初期化関数を呼び出す
        init();
    </script>
</body>
</html>
